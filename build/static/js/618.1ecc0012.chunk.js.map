{"version":3,"file":"static/js/618.1ecc0012.chunk.js","mappings":"6NAeA,MAAMA,EAAM,IAAIC,EAAAA,EAAW,CACzBC,MAAO,CACLC,UAAW,qBAmDf,EAvCwBC,IAAkD,IAAjD,SAAEC,EAAQ,IAAEC,EAAG,MAAEC,EAAK,OAAEC,EAAM,UAAEC,GAAWL,EAElE,IAAKC,EAAU,CACb,MAAMK,EAAmB,CACvBH,MAAOA,EAAK,GAAAI,OAAMJ,EAAK,MAAO,OAC9BC,OAAQA,EAAM,GAAAG,OAAMH,EAAM,MAAO,OACjCI,gBAAiB,UACjBC,QAAS,gBAEX,OAAOC,EAAAA,EAAAA,KAAA,QAAMC,MAAOL,EAAkBD,UAAWA,GACnD,CAGA,MAAMO,EAAUhB,EAAIiB,MAAMZ,GAY1B,OATAW,EACGE,SAAQC,EAAAA,EAAAA,OACRC,QAAOC,EAAAA,EAAAA,OAGNd,GAASC,GACXQ,EAAQM,QAAOC,EAAAA,EAAAA,IAAKhB,EAAOC,GAAQgB,SAAQC,EAAAA,EAAAA,SAI3CX,EAAAA,EAAAA,KAACY,EAAAA,GAAa,CACZC,OAAQX,EACRV,IAAKA,EACLG,UAAWA,EAEXmB,QAAS,EACPC,EAAAA,EAAAA,IAAW,CAAEC,MAAO,CAAC,IAAK,IAAM,SAChCC,EAAAA,EAAAA,S,0FC1DR,MAuDA,EAvDoBC,KAClB,MAAOC,EAAQC,IAAaC,EAAAA,EAAAA,UAAS,KAC9BC,EAAOC,IAAYF,EAAAA,EAAAA,UAAS,KAC5BG,EAASC,IAAcJ,EAAAA,EAAAA,WAAS,GAkBvC,OAhBAK,EAAAA,EAAAA,WAAU,KAER,MAAMC,EAAUC,WAAW,KACzBH,GAAW,GACX,MAAMI,EAAcP,EAAK,QAAAzB,OAAWyB,GAAU,GAC9CQ,MAAM,4BAADjC,OAA6BkC,mBAAmBF,KAClDG,KAAKC,GAAOA,EAAIC,QAChBF,KAAKG,IACJf,EAAUe,EAAKhB,QAAU,IACzBM,GAAW,MAEd,KAEH,MAAO,IAAMW,aAAaT,IACzB,CAACL,KAGFe,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAC,SAAA,EACEvC,EAAAA,EAAAA,KAACwC,EAAAA,GAAM,CAAAD,UACLvC,EAAAA,EAAAA,KAAA,SAAAuC,SAAO,8BAETF,EAAAA,EAAAA,MAAA,OAAK1C,UAAU,8BAA6B4C,SAAA,EAC1CvC,EAAAA,EAAAA,KAAA,MAAIL,UAAU,sCAAqC4C,SAAC,mBACpDvC,EAAAA,EAAAA,KAAA,SACEyC,KAAK,OACLC,MAAOpB,EACPqB,SAAWC,GAAMrB,EAASqB,EAAEC,OAAOH,OACnCI,YAAY,yCACZnD,UAAU,6DAGX6B,GAAUxB,EAAAA,EAAAA,KAAA,KAAAuC,SAAG,gBACZvC,EAAAA,EAAAA,KAAA,OAAKL,UAAU,uDAAsD4C,SAClEpB,EAAO4B,IAAIC,IAAG,IAAAC,EAAA,OACbjD,EAAAA,EAAAA,KAACkD,EAAAA,EAAe,CAEd3D,SAAUyD,EAAIG,UACd3D,KAAgB,QAAXyD,EAAAD,EAAII,eAAO,IAAAH,OAAA,EAAXA,EAAazD,MAAO,gBACzBC,MAAO,IACPC,OAAQ,IACRC,UAAU,uDALLqD,EAAIK,oB","sources":["components/common/cloudinaryImage.jsx","pages/GalleryPage.js"],"sourcesContent":["// src/components/CloudinaryImage.jsx\r\nimport React from 'react';\r\nimport { AdvancedImage, responsive, lazyload } from '@cloudinary/react';\r\nimport { Cloudinary } from '@cloudinary/url-gen';\r\n\r\n// --- CORRECTED IMPORTS ---\r\n// Each function/action must be imported from its specific file path within the library.\r\nimport { fill } from \"@cloudinary/url-gen/actions/resize\";\r\nimport { autoGravity } from \"@cloudinary/url-gen/qualifiers/gravity\";\r\n// The 'auto' helpers for quality and format are 'qualifiers', not 'actions'.\r\nimport { auto as qualityAuto } from \"@cloudinary/url-gen/qualifiers/quality\";\r\nimport { auto as formatAuto } from \"@cloudinary/url-gen/qualifiers/format\";\r\n\r\n// Initialize Cloudinary.\r\n// IMPORTANT: Replace 'your-cloud-name' with your actual Cloudinary cloud name.\r\nconst cld = new Cloudinary({\r\n  cloud: {\r\n    cloudName: 'your-cloud-name'\r\n  }\r\n});\r\n\r\n/**\r\n * A powerful, reusable Cloudinary image component.\r\n * @param {string} publicId - The public ID of the image from Cloudinary.\r\n * @param {string} alt - The alt text for the image.\r\n * @param {number} [width] - The desired width for a fill transformation.\r\n * @param {number} [height] - The desired height for a fill transformation.\r\n * @param {string} [className] - Optional CSS classes to apply to the image.\r\n */\r\nconst CloudinaryImage = ({ publicId, alt, width, height, className }) => {\r\n  // If no publicId is provided, render a placeholder to avoid errors\r\n  if (!publicId) {\r\n    const placeholderStyle = {\r\n      width: width ? `${width}px` : '100%',\r\n      height: height ? `${height}px` : '100%',\r\n      backgroundColor: '#f0f0f0', // A light gray placeholder\r\n      display: 'inline-block',\r\n    };\r\n    return <span style={placeholderStyle} className={className} />;\r\n  }\r\n\r\n  // Use the public ID to get the image object from Cloudinary\r\n  const myImage = cld.image(publicId);\r\n\r\n  // Apply standard optimizations and transformations using the correctly imported functions\r\n  myImage\r\n    .quality(qualityAuto()) // Use the .quality() method for q_auto\r\n    .format(formatAuto());   // Use the .format() method for f_auto\r\n\r\n  // If width and height are provided, apply a fill transformation with auto-gravity\r\n  if (width && height) {\r\n    myImage.resize(fill(width, height).gravity(autoGravity()));\r\n  }\r\n\r\n  return (\r\n    <AdvancedImage\r\n      cldImg={myImage}\r\n      alt={alt}\r\n      className={className}\r\n      // These plugins add responsiveness (srcset) and lazy loading for performance\r\n      plugins={[\r\n        responsive({ steps: [800, 1000, 1400] }),\r\n        lazyload()\r\n      ]}\r\n    />\r\n  );\r\n};\r\n\r\nexport default CloudinaryImage;\r\n","import React, { useState, useEffect } from 'react';\r\nimport { Helmet } from 'react-helmet-async';\r\nimport CloudinaryImage from '../components/common/cloudinaryImage'; // Use our new component\r\n\r\nconst GalleryPage = () => {\r\n  const [images, setImages] = useState([]);\r\n  const [query, setQuery] = useState('');\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    // Simple debounce to prevent API calls on every keystroke\r\n    const handler = setTimeout(() => {\r\n      setLoading(true);\r\n      const searchQuery = query ? `tags:${query}` : '';\r\n      fetch(`/api/search-images?query=${encodeURIComponent(searchQuery)}`)\r\n        .then(res => res.json())\r\n        .then(data => {\r\n          setImages(data.images || []);\r\n          setLoading(false);\r\n        });\r\n    }, 500); // 500ms delay\r\n\r\n    return () => clearTimeout(handler);\r\n  }, [query]);\r\n\r\n  return (\r\n    <>\r\n      <Helmet>\r\n        <title>Gallery | Local Effort</title>\r\n      </Helmet>\r\n      <div className=\"container mx-auto px-4 py-8\">\r\n        <h1 className=\"text-4xl font-bold mb-4 text-center\">Image Gallery</h1>\r\n        <input\r\n          type=\"text\"\r\n          value={query}\r\n          onChange={(e) => setQuery(e.target.value)}\r\n          placeholder=\"Search by tag (e.g., pizza, events)...\"\r\n          className=\"w-full max-w-md mx-auto block p-3 border rounded-md mb-8\"\r\n        />\r\n\r\n        {loading ? <p>Loading...</p> : (\r\n          <div className=\"grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4\">\r\n            {images.map(img => (\r\n              <CloudinaryImage\r\n                key={img.asset_id}\r\n                publicId={img.public_id}\r\n                alt={img.context?.alt || 'Gallery image'}\r\n                width={400}\r\n                height={400}\r\n                className=\"rounded-lg object-cover w-full h-full aspect-square\"\r\n              />\r\n            ))}\r\n          </div>\r\n        )}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default GalleryPage;"],"names":["cld","Cloudinary","cloud","cloudName","_ref","publicId","alt","width","height","className","placeholderStyle","concat","backgroundColor","display","_jsx","style","myImage","image","quality","qualityAuto","format","formatAuto","resize","fill","gravity","autoGravity","AdvancedImage","cldImg","plugins","responsive","steps","lazyload","GalleryPage","images","setImages","useState","query","setQuery","loading","setLoading","useEffect","handler","setTimeout","searchQuery","fetch","encodeURIComponent","then","res","json","data","clearTimeout","_jsxs","_Fragment","children","Helmet","type","value","onChange","e","target","placeholder","map","img","_img$context","CloudinaryImage","public_id","context","asset_id"],"sourceRoot":""}